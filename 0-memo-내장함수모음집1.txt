
splice
findIndex 
find 
map
filter




======================================================
splice 

함수는 배열에서 특정 위치에 요소를 
추가, 삭제, 또는 교체하는 데 사용됩니다. 
배열 자체를 직접 변경하는 파괴적 메서드입니다.

문법:
array.splice(startIndex, deleteCount, item1, item2, ...);
startIndex: 시작 위치 (0부터 시작).
deleteCount: 삭제할 요소의 개수.
item1, item2, ...: 추가할 요소들 (생략 가능).

예시 1: 요소 삭제

let arr = [1, 2, 3, 4, 5];
arr.splice(2, 1); // 2번 인덱스에서 1개의 요소 삭제
console.log(arr); // [1, 2, 4, 5]

예시 2: 요소 추가

let arr = [1, 2, 3, 4, 5];
arr.splice(2, 0, 'a', 'b'); // 2번 인덱스에 요소 추가, 삭제는 없음
console.log(arr); // [1, 2, 'a', 'b', 3, 4, 5]

예시 3: 요소 교체

let arr = [1, 2, 3, 4, 5];
arr.splice(2, 2, 'x', 'y'); // 2번 인덱스부터 2개의 요소 삭제 후 'x', 'y' 추가
console.log(arr); // [1, 2, 'x', 'y', 5]

예시 4: 배열의 끝에서 삭제

let arr = [1, 2, 3, 4, 5];
arr.splice(-1, 1); // 끝에서 1개의 요소 삭제
console.log(arr); // [1, 2, 3, 4]
==================================================================
findIndex 

메서드는 배열에서 조건을 만족하는 
첫 번째 요소의 인덱스를 반환합니다. 
조건을 만족하는 요소가 없으면 -1을 반환합니다.

문법:

array.findIndex(callback(element, index, array));
callback: 배열의 각 요소에 대해 실행할 함수.
element: 배열의 현재 요소.
index (옵션): 배열의 현재 요소의 인덱스.
array (옵션): findIndex를 호출한 배열.
반환값: 조건을 만족하는 첫 번째 요소의 인덱스, 없으면 -1.

간단 예제:

1. 특정 값 찾기

const numbers = [10, 20, 30, 40];
const index = numbers.findIndex(num => num === 30);
console.log(index); // 2

2. 조건을 만족하는 첫 번째 요소 찾기

const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' },
  { id: 3, name: 'Charlie' }
];

const index = users.findIndex(user => user.name === 'Bob');
console.log(index); // 1

3. 조건을 만족하는 요소가 없는 경우

const numbers = [10, 20, 30, 40];
const index = numbers.findIndex(num => num > 50);
console.log(index); // -1

4. 배열의 일부만 조건에 따라 확인

const fruits = ['apple', 'banana', 'cherry', 'date'];
const index = 
fruits.findIndex((fruit, i) => i > 1 && fruit.startsWith('c'));
console.log(index); // 2


활용:
특정 요소 삭제:

let arr = [10, 20, 30, 40];
const index = arr.findIndex(num => num === 30);
if (index !== -1) {
  arr.splice(index, 1); // 요소 삭제
}
console.log(arr); // [10, 20, 40]

조건 만족 여부 확인:

const isFound = arr.findIndex(num => num === 100) !== -1;
console.log(isFound); // false

==================================================================
find 

메서드는 배열에서 조건을 만족하는 
첫 번째 요소를 반환합니다. 
조건을 만족하는 요소가 없으면 undefined를 반환합니다.

문법:

array.find(callback(element, index, array));
callback: 배열의 각 요소에 대해 실행할 함수.
element: 현재 요소.
index (옵션): 현재 요소의 인덱스.
array (옵션): find를 호출한 배열.
반환값: 조건을 만족하는 첫 번째 요소. 
조건을 만족하는 요소가 없으면 undefined.

간단 예제:

1. 특정 값 찾기

const numbers = [10, 20, 30, 40];
const result = numbers.find(num => num === 30);
console.log(result); // 30

2. 객체 배열에서 특정 요소 찾기

const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' },
  { id: 3, name: 'Charlie' }
];

const user = users.find(user => user.name === 'Bob');
console.log(user); // { id: 2, name: 'Bob' }

3. 조건을 만족하는 요소가 없는 경우

const numbers = [10, 20, 30, 40];
const result = numbers.find(num => num > 50);
console.log(result); // undefined

4. 조건이 복잡한 경우

const products = [
  { id: 1, name: 'Laptop', price: 1500 },
  { id: 2, name: 'Phone', price: 800 },
  { id: 3, name: 'Tablet', price: 1200 }
];

const expensiveProduct 
= 
products
.find(product => 
product.price > 1000 && product.name.includes('Tablet'));
console.log(expensiveProduct); 
// { id: 3, name: 'Tablet', price: 1200 }

find와 findIndex의 차이점
메서드	반환값	조건 만족 못 할 경우 반환값
find	요소 값	undefined
findIndex	요소의 인덱스	-1

활용:

특정 요소 존재 여부 확인:

const arr = [10, 20, 30, 40];
const exists = arr.find(num => num === 30) !== undefined;
console.log(exists); // true

배열에서 동적으로 데이터 찾기:

const idToFind = 3;
const item = products.find(product => product.id === idToFind);
console.log(item); // 해당 id를 가진 제품
==================================================================
map
map 메서드 간단 개념 및 예시
map 메서드는 배열의 각 요소를 변환하여 
새로운 배열을 반환하는 메서드입니다. 
원본 배열은 변경되지 않으며, 
항상 새로운 배열이 반환됩니다.

문법
array.map((currentValue, index, array) => {
  // 변환된 값을 반환
});
currentValue: 배열의 현재 요소.
index (선택): 배열의 현재 요소의 인덱스.
array (선택): map을 호출한 원본 배열.
반환값: 새로운 배열.


기본 예제
1. 배열의 각 값을 제곱

const numbers = [1, 2, 3, 4];
const squares = numbers.map((num) => num * num);
console.log(squares); // [1, 4, 9, 16]

2. 객체 배열에서 특정 속성 추출

const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' },
  { id: 3, name: 'Charlie' },
];

const names = users.map((user) => user.name);
console.log(names); // ['Alice', 'Bob', 'Charlie']

3. 인덱스 활용

const numbers = [10, 20, 30];
const results = numbers.map((num, index) => `${index}: ${num}`);
console.log(results); // ['0: 10', '1: 20', '2: 30']

4. HTML 요소 생성 (React 예시)

const items = ['React', 'Vue', 'Angular'];
const itemList = items.map((item, index) => <li key={index}>{item}</li>);
console.log(itemList);

// 출력 결과: [<li>React</li>, <li>Vue</li>, <li>Angular</li>]

map 특징
새로운 배열 반환:
기존 배열을 변경하지 않고 새로운 배열을 생성합니다.

배열 크기 유지:
map의 반환 배열은 원본 배열과 같은 크기를 가집니다.

다양한 변환 가능:
단순 값 변경, 속성 추출, HTML 요소 생성 등 여러 작업에 사용됩니다.
==================================================================
filter
filter 메서드는 배열의 각 요소를 검사하여 
조건을 만족하는 요소만 추출하여 
새로운 배열로 반환합니다. 
원본 배열은 변경되지 않습니다.

문법

array.filter((currentValue, index, array) => {
  // 조건이 true인 경우 요소를 반환
});
currentValue: 배열의 현재 요소.
index (선택): 배열의 현재 요소의 인덱스.
array (선택): filter를 호출한 원본 배열.
반환값: 조건을 만족하는 요소들로 이루어진 새로운 배열.

기본 예제

1. 짝수 필터링

const numbers = [1, 2, 3, 4, 5, 6];
const evenNumbers = numbers.filter((num) => num % 2 === 0);
console.log(evenNumbers); // [2, 4, 6]

2. 객체 배열에서 조건에 맞는 요소 필터링

const users = [
  { id: 1, name: 'Alice', active: true },
  { id: 2, name: 'Bob', active: false },
  { id: 3, name: 'Charlie', active: true },
];

const activeUsers = users.filter((user) => user.active);
console.log(activeUsers); 
// [{ id: 1, name: 'Alice', active: true }, { id: 3, name: 'Charlie', active: true }]

3. 인덱스 활용

const numbers = [10, 20, 30, 40];
const filtered = numbers.filter((num, index) => index > 1);
console.log(filtered); // [30, 40]

4. 특정 문자열 포함 요소 필터링

const fruits = ['apple', 'banana', 'cherry', 'date', 'grape'];
const filteredFruits = fruits.filter((fruit) => fruit.includes('a'));
console.log(filteredFruits); // ['apple', 'banana', 'grape']

5. 중첩 배열 필터링

const nestedArray = [[1, 2], [3, 4], [5, 6]];
const filteredArray = nestedArray.filter((subArray) => subArray[0] % 2 === 0);
console.log(filteredArray); // [[3, 4]]

특징
새로운 배열 반환:
원본 배열은 변경되지 않고, 
조건을 만족하는 요소들로만 새로운 배열이 생성됩니다.

배열 크기 변화:
반환된 배열의 길이는 조건을 만족하는 요소의 개수에 따라 달라집니다.

불리언 값 활용:
콜백 함수는 true 또는 false를 반환하며, true인 경우 해당 요소가 결과 배열에 포함됩니다.

활용 예제
1. 데이터 검색

const items = [
  { id: 1, name: 'Notebook', price: 1000 },
  { id: 2, name: 'Pen', price: 500 },
  { id: 3, name: 'Eraser', price: 300 },
];

const expensiveItems = items.filter((item) => item.price > 500);
console.log(expensiveItems);
// [{ id: 1, name: 'Notebook', price: 1000 }]

2. HTML 요소 필터링 (React 예시)

const fruits = ['apple', 'banana', 'cherry', 'date'];
const filteredFruits = fruits.filter((fruit) => fruit.startsWith('a'));

return (
  <ul>
    {filteredFruits.map((fruit) => (
      <li key={fruit}>{fruit}</li>
    ))}
  </ul>
);
// 렌더링 결과: <li>apple</li>

map vs filter
메서드	목적	반환값
map	배열의 요소를 변환하여 새로운 배열 생성	모든 요소 포함

filter	조건을 만족하는 요소만 새로운 배열에 포함	조건 만족 요소
==================================================================


==================================================================


















